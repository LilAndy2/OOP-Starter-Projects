/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;
import java.util.*;

public class App {
    //////////////////////////////////////// CONSTRUCTOR AND GETTERS ////////////////////////////////////////
    private static ArrayList<Post> posts;
    private static ArrayList<User> users;
    private static ArrayList<Comment> comments;
    /* for retaining this app's data, I am using three arrays: one for the users, one for the post and one for
       the comments; I am going to use them in the App class to store the data; */

    public User getUser(String username) {
        /* this method searches a user by his username in the users list and returns this User's object;
           the for loop is used to go through the users array and find the one given as a parameter; */
        for(User user : users) {
            if (user.getUsername().equals(username)) {
                return user;
            }
        }
        return null;
    }
    public Post getPost(int id) {
        // this function searches a post by its Id in the posts list and returns this Post's object
        // the for loop is used to go through the posts array and find the one with the Id given as a parameter
        for (Post post : posts) {
            if (post.getCurrentId() == id) {
                return post;
            }
        }
        return null;
    }
    public Comment getComment(int id) {
        /* this method searches a comment by its Id in the comments list and returns this Comment's object;
           the for loop is used to go through the comments array and find the one with the Id given as a parameter; */
        for (Comment comment : comments) {
            if (comment.getCurrentId() == id) {
                return comment;
            }
        }
        return null;
    }

    public App() {
        /* this is the App's constructor, which initialises the users, posts and comments arrays, if they are
           not already initialised; */
        if (posts == null)
            posts = new ArrayList<>();
        if (users == null)
            users = new ArrayList<>();
        if (comments == null)
            comments = new ArrayList<>();
    }
    private static void cleanupAll() {
        /* this method's purpose is to erase the data from the app, so it resets teh Id count for both the posts
           and the comments and makes the users, posts and comments arrays null, therefore deleting all the data
           from the app; */
        Post.resetIdCount();
        Comment.resetIdCount();
        users = null;
        posts = null;
        comments = null;
    }
    //////////////////////////////////////// CONSTRUCTOR AND GETTERS ////////////////////////////////////////



    //////////////////////////////////////// PARAMETER MODIFIERS ////////////////////////////////////////
    private static String GetRightCredential(String oldCredential) {
        /* this method converts the credentials of the user given in the command line appropiately;
           for example: "-u 'username'" -> "'username'" and "-p 'password'" -> "'password'"; */
        return oldCredential.substring(3);
    }
    private static String GetRightPostText(String initialText) {
        /* this method converts the text of the post given in the command line appropiately;
           for example: "-text 'Today I'm feeling niiiice'" -> "'Today I'm feeling niiiice'"; */
        return initialText.substring(6);
    }
    private static int ConvertIdToInt(String id, int beginIndex) {
        /* this method converts the Id of the post / comment given in the command line appropiately;
           beginIndex is given depending on what the first part of the argument is (e.g. -post-id =>
           beginIndex = 9 and -comment-id => beginIndex = 12;
           for example: "-post-id '1'" -> 1; */
        return Integer.parseInt(id.substring(beginIndex).replaceAll("'", ""));
    }
    private static String GetRightUsernameToFollowOrUnfollow(String initialUsername) {
        /* this method converts the username which is due to follow given in the command line appropiately;
           for example: "-username 'test'" -> "'test'"; */
        return initialUsername.substring(10);
    }
    //////////////////////////////////////// PARAMETER MODIFIERS ////////////////////////////////////////



    //////////////////////////////////////// USER FUNCTIONS ////////////////////////////////////////
    private static void CreateNewUser(App myApp, String username, String password) {
        /* this method's purpose is to create a new user with the credentials given as parameters (if, of course,
           that user doesn't already exist);
           when successfull, the method will create a new user and add it to the users array; */
        if (myApp.CheckIfUserExists(username)) {
            System.out.println("{ 'status' : 'error' , 'message' : 'User already exists'}");
        } else {
            User newUser = new User(username, password);
            users.add(newUser);
            System.out.println("{ 'status' : 'ok' , 'message' : 'User created successfully'}");
        }
    }
    private boolean CheckIfUserExists(String username) {
        /* this method checks if a user already exists in the system and returns the appropiate boolean value;
           the for loop searches through the users array and returns true if one of the users has the username
           given as a parameter; */
        for (User user : users) {
            if (user.getUsername().equals(username)) {
                return true;
            }
        }
        return false;
    }
    private static boolean CheckLoginStatus(String username, String password) {
        /* this method checks if a user is logged in the system and returns the appropiate boolean value;
           the for loop searches through the users array and returns false (always inverted in main) if
           one of the users has the username and password given as parameters; */
        for (User user : users) {
            if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                return false;
            }
        }
        return true;
    }
    private static boolean SeeIfUserLikedThatPostAlready(User user, Post myPost) {
        /* this method checks if a user liked a certain post; both are given as parameters;
           the for loop is used to go through the liked posts of the user and check if the post given as
           a parameter is one of them; */
        ArrayList<Post> likedPosts = user.getLikedPosts();
        for (Post post : likedPosts) {
            if (myPost == post) {
                return true;
            }
        }
        return false;
    }
    private static boolean CheckIfUserIsFollowingTheAuthorOfThePost(User myUser, Post post) {
        /* this method checks a user is following a post's author;
           the for loop is used to go through the user's followings and check if the post's author
           there; */
        String postAuthor = post.getAuthor().getUsername();
        ArrayList<String> following = myUser.getUsersIFollow();
        for (String user : following) {
            if (user.equals(postAuthor)) {
                return true;
            }
        }
        return false;
    }
    //////////////////////////////////////// USER FUNCTIONS ////////////////////////////////////////



    //////////////////////////////////////// POST FUNCTIONS ////////////////////////////////////////
    private static boolean CheckIdValidity(String username, int id) {
        /* this method checks if there is a post and the posts array with an Id equal to the one given
           as a parameter, and if the post author is the one given as a parameter; the appropiate boolean
           value is returned; */
        for (Post post : posts) {
            if (post.getCurrentId() == id && post.getAuthor().getUsername().equals(username)) {
                return true;
            }
        }
        return false;
    }
    private static boolean CheckIdValidityGeneral(int id) {
        /* this method checks if there is a post and the posts array with an Id equal to the one given
           as a parameter and returns the appropiate boolean value; */
        for (Post post : posts) {
            if (post.getCurrentId() == id) {
                return false;
            }
        }
        return true;
    }
    private static boolean CheckIfPostIsEligibleForLike(App myApp, String username, int id) {
        /* this method checks if a post is eligible to be liked by a certain user and returns the apporpiate
           boolean value;
           in order for a post to be liked, the following conditions have to apply:
                - the post has to exist (it's searched by its Id);
                - the post author must not be the same one as the one given as a parametre (I can't like my own post);
                - the post must not be already liked by the user given as a parameter;
                - the Id has to be valid;
           all of the above are verified with appropiate methods; */
        User user = myApp.getUser(username);
        Post myPost = myApp.getPost(id);
        return myPost != null && !myPost.getAuthor().getUsername().equals(username) && !SeeIfUserLikedThatPostAlready(user, myPost) && !CheckIdValidityGeneral(id);
    }
    private static boolean CheckIfPostIsEligibleForUnlike(App myApp, String username, int id) {
        /* this method checks if a post is eligible to be unliked by a certain user and returns the apporpiate
           boolean value;
           in order for a post to be unliked, the following conditions have to apply:
                - the post has to exist (it's searched by its Id);
                - the post must not be already unliked by the user given as a parameter;
                - the Id has to be valid;
           all of the above are verified with appropiate methods; */
        User user = myApp.getUser(username);
        Post myPost = myApp.getPost(id);
        return myPost != null && !CheckIdValidityGeneral(id) && SeeIfUserLikedThatPostAlready(user, myPost);
    }
    //////////////////////////////////////// POST FUNCTIONS ////////////////////////////////////////



    //////////////////////////////////////// COMMENT FUNCTIONS ////////////////////////////////////////
    private static boolean CheckCommentIdValidity(String username, int id) {
        /* this method checks if an Id for a post is valid and returns the appropiate boolean value;
           in order for the Id to be valid, it has to be among one of the comment's Ids and that comment must
           have the same author as the one given as a parameter; */
        for (Comment comment : comments) {
            if (comment.getCurrentId() == id && (comment.getAuthor().getUsername().equals(username) || comment.getPost().getAuthor().getUsername().equals(username))) {
                return true;
            }
        }
        return false;
    }
    private static boolean CheckCommentId(App myApp, String username, int id) {
        /* this method checks if a comment Id is valid and returns the appropiate boolean value */
        Comment myComment = myApp.getComment(id);
        return myComment != null && CheckCommentIdValidity(username, id);
    }
    private static boolean CheckIfCommentIsEligibleToLike(App myApp, String username, int id) {
        /* this method checks if a comment is eligible to be liked by a certain user and returns the apporpiate
           boolean value;
           in order for a comment to be liked, the following conditions have to apply:
                - the comment has to exist (it's searched by its Id);
                - the comment must not be already liked by the user given as a parameter;
           all of the above are verified with appropiate methods; */
        User user = myApp.getUser(username);
        Comment myComment = myApp.getComment(id);
        return myComment != null && !CheckIfCommentIsAlreadyLiked(user, myComment);
    }
    private static boolean CheckIfCommentIsAlreadyLiked(User user, Comment myComment) {
        /* this method checks if a comment is already liked and returns the appropiate boolean value;
           the for loop is used to search through the liked comments of a user and see if the comment
           given as a parameter is found there; */
        ArrayList<Comment> likedComments = user.getLikedComments();
        for (Comment comment : likedComments) {
            if (myComment.equals(comment)) {
                return true;
            }
        }
        return false;
    }
    public static boolean CheckIfCommentIsEligibleToUnlike(App myApp, String username, int id) {
        /* this method checks if a comment is eligible to be unliked by a certain user and returns the apporpiate
           boolean value;
           in order for a comment to be unliked, the following conditions have to apply:
                - the comment has to exist (it's searched by its Id);
                - the comment must not be already unliked by the user given as a parameter;
           all of the above are verified with appropiate methods; */
        User user = myApp.getUser(username);
        Comment myComment = myApp.getComment(id);
        return myComment != null && CheckIfCommentIsAlreadyLiked(user, myComment);
    }
    //////////////////////////////////////// COMMENT FUNCTIONS ////////////////////////////////////////



    //////////////////////////////////////// UTILITIES ////////////////////////////////////////
    private static String RemoveAnnoyingCharacter(String string, int index) {
        /* this method is used to remove certain characters in a string that might not have to be there,
           it is an utility function and it is used to format the returned string for some of the app's
           commands; */
        if (index < 0 || index >= string.length()) {
            return string;
        } else {
            return string.substring(0, index) + string.substring(index + 1);
        }
    }
    private static ArrayList<String> getStrings(Post post) {
        /* this method is used to separate the details of a post comments in different strings in order for
           them to be formatted later; */
        ArrayList<String> parts = new ArrayList<>();
        ArrayList<Comment> myComments = post.getComments();
        for (Comment comment : myComments) {
            String temp = "{'comment_id' : '" + comment.getCurrentId() + "' , 'comment_text' : " + comment.getText() + " , 'comment_date' : '" + comment.getDate() + "', 'username' : " + comment.getAuthor().getUsername() + ", 'number_of_likes' : '" + comment.getLikeCount() + "'";
            parts.add(temp);
        }
        return parts;
    }
    //////////////////////////////////////// UTILITIES ////////////////////////////////////////



    public static void main(java.lang.String[] strings) {
        App myApp = new App();
        if (strings == null) {
            /* Dummy test, nothing to see here */
            System.out.println("Hello world!");
        } else if (strings[0].equals("-cleanup-all")) {
            /* Removes all data from the app */
            cleanupAll();
            System.out.println("{ 'status' : 'ok' , 'message' : 'Cleanup finished successfully'}");
        } else if (strings[0].equals("-create-user")) {
            /* Creates a new user and adds it to the users array */
            if (strings.length == 1) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Please provide username'}");
            } else if (strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Please provide password'}");
            } else {
                CreateNewUser(myApp, GetRightCredential(strings[1]), GetRightCredential(strings[2]));
            }
        } else if (strings[0].equals("-create-post")) {
            /* Creates a new post and adds it to the posts array for both the app and the post's user */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No text provided'}");
            } else if (GetRightPostText(strings[3]).length() > 300) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Post text length exceeded'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                Post post = new Post(GetRightPostText(strings[3]), user);
                posts.add(post);
                user.AddPost(post);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Post added successfully'}");
            }
        } else if (strings[0].equals("-delete-post-by-id")) {
            /* Deletes a post from the posts array for both the app and the post's user */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No identifier was provided'}");
            } else if (!CheckIdValidity(GetRightCredential(strings[1]), ConvertIdToInt(strings[3], 4))) {
                /* You can delete a post only if its Id indicates it is valid for that */
                System.out.println("{ 'status' : 'error' , 'message' : 'The identifier was not valid'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                Post post = new Post(GetRightPostText(strings[3]), user);
                posts.remove(post);
                user.DeletePost(post);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Post deleted successfully'}");
            }
        } else if (strings[0].equals("-follow-user-by-username")) {
            /* Follows a user and adds it to the following users array */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No username to follow was provided'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                if (user.checkIfIFollowThatUserAlready(GetRightUsernameToFollowOrUnfollow(strings[3])) || !myApp.CheckIfUserExists(GetRightUsernameToFollowOrUnfollow(strings[3]))) {
                    /* You can follow a user only if you don't follow him already and if that users exists */
                    System.out.println("{ 'status' : 'error' , 'message' : 'The username to follow was not valid'}");
                } else {
                    user.followThatUser(myApp.getUser(GetRightUsernameToFollowOrUnfollow(strings[3])));
                    System.out.println("{ 'status' : 'ok' , 'message' : 'Operation executed successfully'}");
                }
            }
        } else if (strings[0].equals("-unfollow-user-by-username")) {
            /* Unfollows a user and deletes it from the following users array */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No username to unfollow was provided'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                if (!myApp.CheckIfUserExists(GetRightUsernameToFollowOrUnfollow(strings[3])) || !user.checkIfIFollowThatUserAlready(GetRightUsernameToFollowOrUnfollow(strings[3]))) {
                    /* You can unfollow a user only if you follow him already and if that users exists; */
                    System.out.println("{ 'status' : 'error' , 'message' : 'The username to unfollow was not valid'}");
                } else {
                    user.unfollowThatUser(myApp.getUser(GetRightUsernameToFollowOrUnfollow(strings[3])));
                    System.out.println("{ 'status' : 'ok' , 'message' : 'Operation executed successfully'}");
                }
            }
        } else if (strings[0].equals("-like-post")) {
            /* Likes a post and adds it to the liked posts array for the user */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No post identifier to like was provided'}");
            } else if (!CheckIfPostIsEligibleForLike(myApp, GetRightCredential(strings[1]), ConvertIdToInt(strings[3], 9))) {
                /* You can like a post only if it is eligible to be liked; */
                System.out.println("{ 'status' : 'error' , 'message' : 'The post identifier to like was not valid'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                Post myPost = myApp.getPost(ConvertIdToInt(strings[3], 9));
                user.LikeThatPost(myPost);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Operation executed successfully'}");
            }
        } else if (strings[0].equals("-unlike-post")) {
            /* Unlikes a post and deletes it from the liked posts array for the user */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No post identifier to unlike was provided'}");
            } else if (!CheckIfPostIsEligibleForUnlike(myApp, GetRightCredential(strings[1]), ConvertIdToInt(strings[3], 9))) {
                /* You can unlike a post only if it is eligible to be unliked; */
                System.out.println("{ 'status' : 'error' , 'message' : 'The post identifier to unlike was not valid'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                Post myPost = myApp.getPost(ConvertIdToInt(strings[3], 9));
                user.UnlikeThatPost(myPost);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Operation executed successfully'}");
            }
        } else if (strings[0].equals("-comment-post")) {
            /* Comments a post and adds the comment to the comments array for both the app and the post that
               was commented; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No text provided'}");
            } else if (GetRightPostText(strings[4]).length() > 300) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Comment text length exceeded'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                Post myPost = myApp.getPost(ConvertIdToInt(strings[3], 9));
                String text = GetRightPostText(strings[4]);
                Comment comment = new Comment(text, user, myPost);
                myPost.addComment(comment);
                comments.add(comment);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Comment added successfully'}");
            }
        } else if (strings[0].equals("-delete-comment-by-id")) {
            /* Deletes a comment from a post and removes the comment from the comments array for both the app
               and the post that was previously commented; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No identifier was provided'}");
            } else if (!CheckCommentId(myApp, GetRightCredential(strings[1]), ConvertIdToInt(strings[3], 4))) {
                /* You can only delete a comment if its Id proves it is valid for that; */
                System.out.println("{ 'status' : 'error' , 'message' : 'The identifier was not valid'}");
            } else {
                Comment comment = myApp.getComment(ConvertIdToInt(strings[3], 4));
                Post post = comment.getPost();
                post.removeComment(comment);
                comments.remove(comment);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Operation executed successfully'}");
            }
        } else if (strings[0].equals("-like-comment")) {
            /* Likes a comment and adds it to the liked comments array for the user that liked it; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No comment identifier to like was provided'}");
            } else if (!CheckIfCommentIsEligibleToLike(myApp, GetRightCredential(strings[1]), ConvertIdToInt(strings[3], 12))) {
                /* You can only like a comment only if its Id proves it is valid for that; */
                System.out.println("{ 'status' : 'error' , 'message' : 'The comment identifier to like was not valid'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                Comment comment = myApp.getComment(ConvertIdToInt(strings[3], 12));
                user.LikeThatComment(comment);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Operation executed successfully'}");
            }
        } else if (strings[0].equals("-unlike-comment")) {
            /* Unlikes a comment and deletes it from the liked comments array for the user that previously liked it; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No comment identifier to unlike was provided'}");
            } else if (!CheckIfCommentIsEligibleToUnlike(myApp, GetRightCredential(strings[1]), ConvertIdToInt(strings[3], 12))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'The comment identifier to unlike was not valid'}");
            } else {
                User user = myApp.getUser(GetRightCredential(strings[1]));
                Comment comment = myApp.getComment(ConvertIdToInt(strings[3], 12));
                user.UnlikeThatComment(comment);
                System.out.println("{ 'status' : 'ok' , 'message' : 'Operation executed successfully'}");
            }
        } else if (strings[0].equals("-get-followings-posts")) {
            /* Shows the details of all the posts of the persons the logged in users follows; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else {
                StringBuilder finalString = new StringBuilder();
                ArrayList<String> parts = new ArrayList<>();
                User user = myApp.getUser(GetRightCredential(strings[1]));
                for (Post post : posts) {
                    if (CheckIfUserIsFollowingTheAuthorOfThePost(user, post)) {
                        String temp = "{'post_id' : '" + post.getCurrentId() + "', 'post_text' : " + post.getText() + ", 'post_date' : '" + post.getDate() + "', 'username' : " + post.getAuthor().getUsername() + "},";
                        parts.add(temp);
                    }
                }
                Collections.reverse(parts);
                for (String part : parts) {
                    finalString.append(part);
                }
                finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + "]}");
            }
        } else if (strings[0].equals("-get-user-posts")) {
            /* Shows the details of all the posts of the user given as a parameter; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No username to list posts was provided'}");
            } else {
                User myUser = myApp.getUser(GetRightCredential(strings[1]));
                String userToFollow = GetRightUsernameToFollowOrUnfollow(strings[3]);
                if (!myApp.CheckIfUserExists(userToFollow) || !myUser.checkIfIFollowThatUserAlready(userToFollow)) {
                    System.out.println("{ 'status' : 'error' , 'message' : 'The username to list posts was not valid'}");
                } else {
                    StringBuilder finalString = new StringBuilder();
                    ArrayList<String> parts = new ArrayList<>();
                    for (Post post : posts) {
                        if (post.getAuthor().getUsername().equals(userToFollow)) {
                            String temp = "{'post_id' : '" + post.getCurrentId() + "', 'post_text' : " + post.getText() + ", 'post_date' : '" + post.getDate() + "'},";
                            parts.add(temp);
                        }
                    }
                    Collections.reverse(parts);
                    for (String part : parts) {
                        finalString.append(part);
                    }
                    finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                    System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + "]}");
                }
            }
        } else if (strings[0].equals("-get-post-details")) {
            /* Shows the details of the post given as a parameter; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No post identifier was provided'}");
            } else {
                Post post = myApp.getPost(ConvertIdToInt(strings[3], 9));
                if (post == null) {
                    System.out.println("{ 'status' : 'error' , 'message' : 'The post identifier was not valid'}");
                } else {
                    String postAuthor = post.getAuthor().getUsername();
                    if (CheckIdValidityGeneral(ConvertIdToInt(strings[3], 9))) {
                        System.out.println("{ 'status' : 'error' , 'message' : 'The post identifier was not valid'}");
                    } else {
                        StringBuilder finalString = new StringBuilder("[{'post_text' : " + post.getText() + ", 'post_date' :'" + post.getDate() + "', 'username' : " + postAuthor + ", 'number_of_likes' : '" + post.getLikeCount() + "' , 'comments' : [");
                        ArrayList<String> parts = getStrings(post);
                        Collections.reverse(parts);
                        for (String part : parts) {
                            finalString.append(part);
                        }
                        System.out.println("{ 'status' : 'ok', 'message' : " + finalString + "}] }] }");
                    }
                }
            }
        } else if (strings[0].equals("-get-following")) {
            /* Shows the users that the user that is logged in follows; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else {
                User myUser = myApp.getUser(GetRightCredential(strings[1]));
                ArrayList<String> usersIFollow = myUser.getUsersIFollow();
                StringBuilder finalString = new StringBuilder();
                for (String user : usersIFollow) {
                    finalString.append(user).append(", ");
                }
                finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + "]}");
            }
        } else if (strings[0].equals("-get-followers")) {
            /* Shows the users that follow the user that is logged in; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else if (strings.length == 3) {
                System.out.println("{ 'status' : 'error' , 'message' : 'No username to list followers was provided'}");
            } else {
                User myUser = myApp.getUser(GetRightCredential(strings[1]));
                String userToCheckFollowers = GetRightUsernameToFollowOrUnfollow(strings[3]);
                if (!myUser.checkIfIFollowThatUserAlready(userToCheckFollowers) || !myApp.CheckIfUserExists(userToCheckFollowers)) {
                    System.out.println("{ 'status' : 'error' , 'message' : 'The username to list followers was not valid'}");
                } else {
                    StringBuilder finalString = new StringBuilder();
                    for (User user : users) {
                        ArrayList<String> usersIFollow = user.getUsersIFollow();
                        if (usersIFollow != null) {
                            for (String userTest : usersIFollow) {
                                if (userTest.equals(userToCheckFollowers)) {
                                    finalString.append(user.getUsername()).append(", ");
                                }
                            }
                        }
                    }
                    finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                    finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                    System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + "]}");
                }
            }
        } else if (strings[0].equals("-get-most-liked-posts")) {
            /* Shows the details of the most 5 liked posts in the app; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else {
                ArrayList<Post> sortedPosts = new ArrayList<>(posts);
                Comparator<Post> likesComparator = Comparator.comparingInt(Post::getLikeCount).reversed();
                sortedPosts.sort(likesComparator);
                List<Post> finalList = sortedPosts.subList(0, Math.min(5, sortedPosts.size()));
                StringBuilder finalString = new StringBuilder();
                for (Post post : finalList)  {
                    finalString.append("{'post_id' : '").append(post.getCurrentId()).append("','post_text' : ").append(post.getText()).append(", 'post_date' : '").append(post.getDate()).append("', 'username' : ").append(post.getAuthor().getUsername()).append(", 'number_of_likes' : '").append(post.getLikeCount()).append("' },");
                }
                finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + " ]}");
            }
        } else if (strings[0].equals("-get-most-followed-users")) {
            /* Shows the most 5 followes users in the app; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else {
                ArrayList<User> sortedUsers = new ArrayList<>(users);
                Comparator<User> likesComparator = Comparator.comparingInt(User::getNumberOfFollowers).reversed();
                sortedUsers.sort(likesComparator);
                List<User> finalList = sortedUsers.subList(0, Math.min(5, sortedUsers.size()));
                StringBuilder finalString = new StringBuilder();
                for (User user : finalList) {
                    finalString.append("{'username' : ").append(user.getUsername()).append(",'number_of_followers' : ' ").append(user.getNumberOfFollowers()).append(" ' },");
                }
                finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + " ]}");
            }
        } else if (strings[0].equals("-get-most-commented-posts")) {
            /* Shows the details of the most 5 comments posts in the app; */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else {
                ArrayList<Post> sortedPosts = new ArrayList<>(posts);
                Comparator<Post> likesComparator = Comparator.comparingInt(Post::getNumberOfComments).reversed();
                sortedPosts.sort(likesComparator);
                List<Post> finalList = sortedPosts.subList(0, Math.min(5, sortedPosts.size()));
                StringBuilder finalString = new StringBuilder();
                for (Post post : finalList)  {
                    finalString.append("{'post_id' : '").append(post.getCurrentId()).append("','post_text' : ").append(post.getText()).append(", 'post_date' : '").append(post.getDate()).append("', 'username' : ").append(post.getAuthor().getUsername()).append(", 'number_of_comments' : '").append(post.getNumberOfComments()).append("' },");
                }
                finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + "]}");
            }
        } else if (strings[0].equals("-get-most-liked-users")) {
            /* Shows the most 5 liked users in the app (total of likes for both posts and comments); */
            if (strings.length == 1 || strings.length == 2) {
                System.out.println("{ 'status' : 'error' , 'message' : 'You need to be authenticated'}");
            } else if (CheckLoginStatus(GetRightCredential(strings[1]), GetRightCredential(strings[2]))) {
                System.out.println("{ 'status' : 'error' , 'message' : 'Login failed'}");
            } else {
                for (User user : users) {
                    ArrayList<Post> myPosts = user.getMyPosts();
                    for (Post post : myPosts) {
                        user.AddToTotalLikes(post.getLikeCount());
                        ArrayList<Comment> myComments = post.getComments();
                        for (Comment comment : myComments) {
                            User thisUser = comment.getAuthor();
                            thisUser.AddToTotalLikes(comment.getLikeCount());
                        }
                    }
                }
                ArrayList<User> sortedUsers = new ArrayList<>(users);
                Comparator<User> likesComparator = Comparator.comparingInt(User::getTotalLikes).reversed();
                sortedUsers.sort(likesComparator);
                List<User> finalList = sortedUsers.subList(0, Math.min(5, sortedUsers.size()));
                StringBuilder finalString = new StringBuilder();
                for (User user : finalList) {
                    finalString.append("{'username' : ").append(user.getUsername()).append(",'number_of_likes' : ' ").append(user.getTotalLikes()).append(" ' },");
                }
                finalString = new StringBuilder(RemoveAnnoyingCharacter(finalString.toString(), finalString.length() - 1));
                System.out.println("{ 'status' : 'ok', 'message' : [" + finalString + "]}");
            }
        }
    }
}